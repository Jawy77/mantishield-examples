<#
.SYNOPSIS
    Script de Instalación del Agente Mantishield para Windows.

.DESCRIPTION
    Este script realiza las siguientes acciones:
    1. Verifica los permisos de Administrador y el token de cliente.
    2. Crea un directorio de instalación en C:\Program Files\Mantishield.
    3. Crea el script del agente (agent.py) que escanea los entornos de Conda.
    4. Establece una Tarea Programada para ejecutar el agente diariamente.

.PARAMETER ClientToken
    El token de cliente único proporcionado por Mantishield. Es obligatorio.

.EXAMPLE
    .\install_mantishield.ps1 -ClientToken "TU_TOKEN_DE_CLIENTE"
#>
[CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]$ClientToken
)

# --- Variables de Configuración ---
$InstallDir = "C:\Program Files\Mantishield"
$AgentScriptPath = Join-Path -Path $InstallDir -ChildPath "agent.py"
$ApiEndpoint = "https://api.mantishield.com/v1/ingest"

# --- Inicio del Script de Instalación ---
Write-Host "Iniciando la instalación del Agente Mantishield..." -ForegroundColor Green

# 1. Verificaciones Iniciales
# Verificar si se está ejecutando como Administrador
$currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if (-not $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Error "Este script debe ser ejecutado con privilegios de Administrador. Por favor, abre PowerShell como Administrador y vuelve a intentarlo."
    exit 1
}

# 2. Creación del Directorio
if (-not (Test-Path -Path $InstallDir)) {
    Write-Host "Creando el directorio de instalación en $InstallDir..." -ForegroundColor Cyan
    New-Item -Path $InstallDir -ItemType Directory | Out-Null
}

# 3. Creación del Script del Agente (agent.py)
Write-Host "Creando el script del agente en $AgentScriptPath..." -ForegroundColor Cyan
# En un escenario real, este archivo se descargaría. Aquí lo creamos directamente.
# El contenido del script Python es idéntico al de la versión de Linux.
# Usamos un Here-String de PowerShell para definir el contenido.
$pythonScriptContent = @"
#!/usr/bin/env python3
# Agente de recolección de paquetes de Conda para Mantishield
import os
import json
import subprocess
import socket # Usamos socket para obtener el hostname en Windows
import requests # Nota: se asume que requests está disponible o se instala.

# --- Configuración del Agente ---
API_ENDPOINT = "$ApiEndpoint"
CLIENT_TOKEN = "$ClientToken"

def find_conda_environments():
    """Encuentra las rutas de los entornos de Conda."""
    try:
        result = subprocess.run(['conda', 'info', '--base'], capture_output=True, text=True, check=True, shell=True)
        conda_base_path = result.stdout.strip()
        envs_path = os.path.join(conda_base_path, 'envs')
        if not os.path.exists(envs_path): return [conda_base_path]
        environments = [os.path.join(envs_path, d) for d in os.listdir(envs_path) if os.path.isdir(os.path.join(envs_path, d))]
        environments.append(conda_base_path)
        return environments
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Error: No se pudo encontrar Conda o ejecutar el comando 'conda'.")
        return []

def get_conda_packages(env_path):
    """Obtiene la lista de paquetes de un entorno de Conda específico."""
    try:
        # Ejecuta 'conda list' en el entorno y obtiene la salida en formato JSON
        result = subprocess.run(
            ['conda', 'list', '-p', f'"{env_path}"', '--json'],
            capture_output=True, text=True, check=True, shell=True
        )
        return json.loads(result.stdout)
    except Exception as e:
        print(f"No se pudo analizar el entorno {env_path}: {e}")
        return None

def main():
    """Función principal del agente."""
    print("MANTISHIELD AGENT: Iniciando escaneo de paquetes...")
    all_packages = []
    environments = find_conda_environments()

    for env in environments:
        print(f"Analizando entorno: {env}")
        packages = get_conda_packages(env)
        if packages:
            all_packages.append({"environment": os.path.basename(env), "packages": packages})
    
    if not all_packages:
        print("No se encontraron paquetes para reportar.")
        return

    payload = {
        "hostname": socket.gethostname(),
        "os": "windows",
        "data": all_packages
    }
    
    headers = {
        "Authorization": f"Bearer {CLIENT_TOKEN}",
        "Content-Type": "application/json"
    }

    try:
        print(f"Enviando {len(all_packages)} reporte(s) de entorno(s) a la API de Mantishield...")
        response = requests.post(API_ENDPOINT, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        print("Reporte enviado exitosamente.")
    except requests.RequestException as e:
        print(f"Error al enviar el reporte a la API: {e}")

if __name__ == "__main__":
    main()
"@
# Guardar el contenido en el archivo
$pythonScriptContent | Out-File -FilePath $AgentScriptPath -Encoding utf8

# 4. Configuración de la Tarea Programada
Write-Host "Configurando la Tarea Programada para ejecución diaria..." -ForegroundColor Cyan

$taskName = "MantishieldAgentScan"
$taskAction = New-ScheduledTaskAction -Execute "python.exe" -Argument "$AgentScriptPath" # Asume que python está en el PATH
$taskTrigger = New-ScheduledTaskTrigger -Daily -At 3am
$taskPrincipal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest

# Elimina la tarea si ya existe para evitar errores
Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue | Unregister-ScheduledTask -Confirm:$false

# Registra la nueva tarea
Register-ScheduledTask -TaskName $taskName -Action $taskAction -Trigger $taskTrigger -Principal $taskPrincipal -Description "Ejecuta el agente de Mantishield para escanear vulnerabilidades en paquetes de Conda." | Out-Null

# --- Finalización ---
Write-Host "--------------------------------------------------------" -ForegroundColor Green
Write-Host "¡Instalación del Agente Mantishield completada!" -ForegroundColor Green
Write-Host "El agente se ejecutará automáticamente todos los días a las 3:00 AM." -ForegroundColor Green
Write-Host "Puede verificar la Tarea Programada en el 'Programador de Tareas' de Windows." -ForegroundColor Green
Write-Host "--------------------------------------------------------" -ForegroundColor Green

exit 0
